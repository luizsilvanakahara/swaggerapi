/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-14T00:09:29.487Z")

@Api(value = "Clientes", description = "the Clientes API")
@RequestMapping(value = "/Brasilprev-api/v1")
public interface ClientesApi {

    @ApiOperation(value = "Altera a Cliente", nickname = "alteraCliente", notes = "Altera o Cliente existente.", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Alteração efetuada com sucesso!"),
        @ApiResponse(code = 400, message = "Requisição inválida."),
        @ApiResponse(code = 401, message = "Requisição não autorizada."),
        @ApiResponse(code = 404, message = "Registro não encontrado."),
        @ApiResponse(code = 500, message = "Erro no servidor.") })
    @RequestMapping(value = "/Clientes/{cpf}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> alteraCliente(@ApiParam(value = "",required=true) @PathVariable("cpf") Long cpf,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "valor", required = true) Double valor,@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization);


    @ApiOperation(value = "Exclui o Cliente", nickname = "excluiCliente", notes = "Exclui a transação existente.", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Exclusão efetuada com sucesso"),
        @ApiResponse(code = 400, message = "Requisição inválida."),
        @ApiResponse(code = 401, message = "Requisição não autorizada."),
        @ApiResponse(code = 404, message = "Registro não encontrado."),
        @ApiResponse(code = 500, message = "Erro no servidor") })
    @RequestMapping(value = "/Clientes/{cpf}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> excluiCliente(@ApiParam(value = "",required=true) @PathVariable("cpf") Long cpf,@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization);

}
